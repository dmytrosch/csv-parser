{"version":3,"sources":["variables.js","utils/validateFields.js","components/Table/TableCeil.js","components/Table/TableRow.js","utils/checkIsDublicated.js","components/Table/Table.js","utils/normalizeStates.js","utils/normalizeDataToObject.js","utils/normalizePhoneNumber.js","App.js","utils/validateHead.js","index.js"],"names":["HEAD","isValidStateInput","require","object","currentAge","email","string","validator","isEmail","age","number","this","isInt","toString","phone","isMobilePhone","experience","Number","isValid","yearlyIncome","decimalString","isDecimal","expirationDate","date","isDateValid","isDate","format","isDateMoreThanCurrent","Date","licenseStates","states","includes","split","every","state","hasChildren","boolead","isBoolean","toLowerCase","licenseNumber","matches","length","TableCeil","children","column","isDublicated","useState","isInvalid","setIsInvalid","useEffect","validateFields","style","backgroundColor","TableRow","item","row","arr","dublicatedId","setDublicatedIds","dublicatedField","setDublicatedField","dublicate","array","dublicated","find","el","id","checkIsDublicated","field","fullName","Table","data","map","_","retrieveStateInformation","normalizeDataToObject","index","obj","trim","stringNumber","normalizePhoneNumber","toFixed","toUpperCase","stateObject","abbreviation","join","App","file","setFile","alert","setAlert","content","setContent","headInCVS","inx","newArray","pop","shift","normalizedData","type","onChange","e","cvs","target","files","Papa","parse","dynamicTyping","complete","result","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a48a6eb8.chunk.js","sourcesContent":["export const HEAD = [\r\n    \"Full Name\",\r\n    \"Phone\",\r\n    \"Email\",\r\n    \"Age\",\r\n    \"Experience\",\r\n    \"Yearly income\",\r\n    \"Has children\",\r\n    \"Licence states\",\r\n    \"Expiration date\",\r\n    \"License number\",\r\n];\r\n\r\n","import validator from \"validator\";\r\nconst { isValidStateInput } = require(\"usa-state-validator\");\r\n\r\nconst object = {\r\n    currentAge: null,\r\n    email: (string) => validator.isEmail(string),\r\n    age: function (number) {\r\n        this.currentAge = number;\r\n        return number >= 21 && validator.isInt(number.toString());\r\n    },\r\n    phone: (string) => validator.isMobilePhone(string, \"en-US\"),\r\n    experience: function (string) {\r\n        const number = Number(string);\r\n        if (!this.currentAge && number >= 0) {\r\n            return true;\r\n        }\r\n        const isValid = number >= 0 && number <= this.currentAge;\r\n        this.currentAge = null;\r\n        return isValid;\r\n    },\r\n    yearlyIncome: (decimalString) =>\r\n        Number(decimalString) >= 0 &&\r\n        Number(decimalString) <= 1000000 &&\r\n        validator.isDecimal(decimalString),\r\n    expirationDate: (date) => {\r\n        const isDateValid =\r\n            validator.isDate(date, { format: \"YYYY/MM/DD\" }) ||\r\n            validator.isDate(date, { format: \"MM/DD/YYYY\" });\r\n        const isDateMoreThanCurrent = new Date(date) > new Date();\r\n        return isDateValid && isDateMoreThanCurrent;\r\n    },\r\n    licenseStates: (states) => {\r\n        if (states.includes(\"|\")) {\r\n            const arr = states.split(\"|\");\r\n            return arr.every((state) => isValidStateInput(state));\r\n        }\r\n        return isValidStateInput(states);\r\n    },\r\n    hasChildren: (boolead) => validator.isBoolean(boolead.toLowerCase()),\r\n    licenseNumber: (string) =>\r\n        validator.matches(string, /^[a-zA-Z0-9]+$/) && string.length === 6,\r\n};\r\n\r\nexport default object;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport validateFields from \"../../utils/validateFields\";\r\n\r\nexport default function TableCeil({ children, column, isDublicated }) {\r\n    const [isInvalid, setIsInvalid] = useState(false);\r\n    useEffect(() => {\r\n        if (isDublicated) {\r\n            setIsInvalid(true);\r\n            return;\r\n        }\r\n        if (column && children) {\r\n            const isValid = validateFields[column](children);\r\n            !isValid && setIsInvalid(true);\r\n        }\r\n    }, [children, column, isDublicated]);\r\n    return (\r\n        <td style={isInvalid ? { backgroundColor: \"red\" } : {}}>{children}</td>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport TableCeil from \"./TableCeil\";\r\nimport checkIsDublicated from \"../../utils/checkIsDublicated\";\r\n\r\nexport default function TableRow({ row: item, arr }) {\r\n    const [dublicatedId, setDublicatedIds] = useState(null);\r\n    const [dublicatedField, setDublicatedField] = useState(null);\r\n    useEffect(() => {\r\n        const dublicate = checkIsDublicated(arr, item);\r\n        if (!dublicate) return;\r\n        const [id, field] = dublicate;\r\n        setDublicatedField(field);\r\n        setDublicatedIds(id);\r\n    }, [item, arr]);\r\n\r\n    return (\r\n        <tr>\r\n            <TableCeil>{item.id}</TableCeil>\r\n            <TableCeil>{item.fullName}</TableCeil>\r\n            <TableCeil\r\n                column=\"phone\"\r\n                isDublicated={dublicatedField === \"phone\"}\r\n            >\r\n                {item.phone}\r\n            </TableCeil>\r\n            <TableCeil\r\n                column=\"email\"\r\n                isDublicated={dublicatedField === \"email\"}\r\n            >\r\n                {item.email}\r\n            </TableCeil>\r\n            <TableCeil column=\"age\">{item.age}</TableCeil>\r\n            <TableCeil column=\"experience\">{item.experience}</TableCeil>\r\n            <TableCeil column=\"yearlyIncome\">{item.yearlyIncome}</TableCeil>\r\n            <TableCeil column=\"hasChildren\">{item.hasChildren}</TableCeil>\r\n            <TableCeil column=\"licenseStates\">{item.licenseStates}</TableCeil>\r\n            <TableCeil column=\"expirationDate\">{item.expirationDate}</TableCeil>\r\n            <TableCeil column=\"licenseNumber\">{item.licenseNumber}</TableCeil>\r\n            <TableCeil>{dublicatedId}</TableCeil>\r\n        </tr>\r\n    );\r\n}\r\n","export default function checkIsDublicated(array, item) {\r\n    let dublicatedField;\r\n    const dublicated = array.find((el) => {\r\n        if (el.id === item.id) {\r\n            return false;\r\n        }\r\n        if (el.phone === item.phone) {\r\n            dublicatedField = \"phone\";\r\n            return true;\r\n        }\r\n        if (el.email === item.email) {\r\n            dublicatedField = \"email\";\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n    return dublicated ? [dublicated.id, dublicatedField] : null;\r\n}\r\n","import React from \"react\";\r\n\r\nimport { HEAD } from \"../../variables\";\r\nimport TableRow from \"./TableRow\";\r\n\r\nexport default function Table({ data }) {\r\n    return (\r\n        <table>\r\n            <thead>\r\n                <tr>\r\n                    <th>id</th>\r\n                    {HEAD.map((el) => (\r\n                        <th key={el}>{el}</th>\r\n                    ))}\r\n                    <th>Dublicated with</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {data &&\r\n                    data.map((item, _, arr) => (\r\n                        <TableRow key={item.id} row={item} arr={arr} />\r\n                    ))}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n","const { retrieveStateInformation } = require(\"usa-state-validator\");\r\n\r\nexport default function normalizeStates(string) {\r\n    if (string.includes(\",\")) {\r\n        const arr = string.split(\",\");\r\n        const normalized = arr.map((el) => {\r\n            if (el.length > 2) {\r\n                const stateObject = retrieveStateInformation(el);\r\n                return stateObject ? stateObject.abbreviation : el;\r\n            }\r\n            return el;\r\n        });\r\n        return normalized.join(\"|\");\r\n    }\r\n    return string;\r\n}\r\n","import normalizePhoneNumber from \"./normalizePhoneNumber\";\r\nimport normalizedStates from \"./normalizeStates\";\r\n\r\nexport default function normalizeDataToObject(array) {\r\n    const normalizedArr = array.map((el, index) => {\r\n        const obj = {};\r\n        obj.id = index + 1;\r\n        obj.fullName = el[0] && el[0].trim();\r\n        const phone = el[1];\r\n        obj.phone = normalizePhoneNumber(phone);\r\n        obj.email = el[2] && el[2].toLowerCase().trim();\r\n        obj.age = el[3];\r\n        obj.experience = el[4];\r\n        obj.yearlyIncome = el[5] && el[5].toFixed(2);\r\n        obj.hasChildren = el[6]\r\n            ? el[6].toString().toUpperCase().trim()\r\n            : \"FALSE\";\r\n        obj.licenseStates = el[7] && normalizedStates(el[7]);\r\n        obj.expirationDate = el[8] && el[8].trim();\r\n        obj.licenseNumber = el[9] && el[9].trim();\r\n        return obj;\r\n    });\r\n    return normalizedArr;\r\n}\r\n","export default function normalizePhoneNumber(number) {\r\n    const stringNumber = number.toString();\r\n    if (stringNumber.length === 10) {\r\n        return \"+1\" + number;\r\n    }\r\n    if (stringNumber.length === 11) {\r\n        return \"+\" + number;\r\n    }\r\n    return stringNumber;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport Table from \"./components/Table/Table\";\r\nimport normalizeDataToObject from \"./utils/normalizeDataToObject\";\r\nimport validateHead from \"./utils/validateHead\";\r\n\r\nfunction App() {\r\n    const [file, setFile] = useState(null);\r\n    const [alert, setAlert] = useState(false);\r\n    const [content, setContent] = useState(null);\r\n    const uploadFileHandler = (e) => {\r\n        const cvs = e.target.files[0];\r\n        if (cvs.type !== \"text/csv\" || !cvs) {\r\n            setAlert(true);\r\n            return;\r\n        }\r\n        Papa.parse(cvs, {\r\n            dynamicTyping: true,\r\n            complete: (result) => setFile(result.data),\r\n        });\r\n    };\r\n    useEffect(() => {\r\n        if (!file) return;\r\n        alert && setAlert(false);\r\n        const isValidHead = validateHead(file[0]);\r\n        if (!isValidHead) {\r\n            setAlert(true);\r\n            return;\r\n        }\r\n        const newArray = [...file];\r\n        if (newArray[newArray.length - 1][0] === null) {\r\n            newArray.pop();\r\n        }\r\n        newArray.shift();\r\n        const normalizedData = normalizeDataToObject(newArray);\r\n        const isRequiredFieldsExist = normalizedData.every(\r\n            (el) => el.fullName && el.email && el.phone\r\n        );\r\n        if (!isRequiredFieldsExist) {\r\n            setAlert(true);\r\n            return;\r\n        }\r\n        setContent(normalizedData);\r\n    }, [file, setAlert]);\r\n    return (\r\n        <div>\r\n            <input\r\n                type=\"file\"\r\n                onChange={uploadFileHandler}\r\n                className=\"upload\"\r\n            />\r\n\r\n            {!alert && file && <Table data={content} />}\r\n            {alert && (\r\n                <div className=\"alert\">\r\n                    <span className=\"alert-text\">Wrong file</span>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { HEAD } from \"../variables\";\r\n\r\nexport default function validateHead(headInCVS) {\r\n    if (headInCVS.length !== HEAD.length) {\r\n        return false;\r\n    }\r\n    return headInCVS.every(\r\n        (el, inx) => el.toLowerCase() === HEAD[inx].toLowerCase()\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./style.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}